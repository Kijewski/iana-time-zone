name: build

on:
  push:
    branches: [ '**' ]
  pull_request:
    branches: [ '**' ]
  schedule:
    # At 23:25 on Thursday.
    - cron: "25 23 * * 4"

jobs:
  test:
    strategy:
      matrix:
        runs-on: [ubuntu-20.04, windows-2022, macos-12]
        toolchain: ["1.31", stable, nightly]
    runs-on: ${{ matrix.runs-on }}
    name: "Test (${{ matrix.runs-on }}/${{ matrix.toolchain }})"
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install Rust
        id: actions-rs
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.toolchain }}
          override: true
      - run: cargo test --all-targets
      - run: cargo run --example stress-test

  test-wasm:
    runs-on: ubuntu-latest
    name: "Test WebAssembly"
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install Rust
        id: actions-rs
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          target: wasm32-unknown-unknown
      - name: Install Node
        uses: actions/setup-node@v3
        with:
          node-version: 14
      - run: which wasm-pack || cargo install wasm-pack
      - run: wasm-pack test --node

  build-cross:
    strategy:
      matrix:
        target:
          - x86_64-unknown-freebsd
          - x86_64-unknown-illumos
          - x86_64-unknown-netbsd
          - x86_64-linux-android
          - i686-linux-android
          - arm-linux-androideabi
          - aarch64-linux-android
          - sparcv9-sun-solaris
    runs-on: ubuntu-latest
    name: "Build for ${{ matrix.target }}"
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install Rust
        id: actions-rs
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          target: ${{ matrix.target }}
      - run: which cross || cargo install cross
      - run: cross build --target ${{ matrix.target }} --examples

  build-ios-cross:
    strategy:
      matrix:
        target: [aarch64-apple-ios-sim, aarch64-apple-ios, x86_64-apple-ios]
    runs-on: macos-12
    name: "Build for ${{ matrix.target }}"
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install Rust
        id: actions-rs
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          target: ${{ matrix.target }}
      - run: which cross || cargo install cross
      - run: cross build --target ${{ matrix.target }} --examples

  check:
    strategy:
      matrix:
        toolchain: ["1.31", stable, nightly]
    name: "Check (${{ matrix.toolchain }})"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install Rust
        id: actions-rs
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.toolchain }}
          override: true
          components: clippy
      - run: cargo check --all-targets
      - run: cargo clippy --all-targets -- -D warnings

  doc:
    name: "Documentation"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install Rust
        id: actions-rs
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true
      - run: RUSTDOCFLAGS="-D warnings" cargo doc --all-features

  audit:
    name: "Cargo audit"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Audit
        uses: actions-rs/audit-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  fallback:
    name: "Build with fallback"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install Rust
        id: actions-rs
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: x86_64-fortanix-unknown-sgx
          override: true
      # Should fail (outcome is negated):
      - run: if cargo build --lib --target x86_64-fortanix-unknown-sgx; then exit 1; fi
      # Should succeed:
      - run: cargo build --lib --target x86_64-fortanix-unknown-sgx --features fallback
